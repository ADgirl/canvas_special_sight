!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],e):e(n.BAS={},n.THREE)}(this,function(n,e){"use strict";function t(n,t){e.ShaderMaterial.call(this);var r=n.uniformValues;if(delete n.uniformValues,this.setValues(n),this.uniforms=e.UniformsUtils.merge([t,this.uniforms]),this.setUniformValues(r),r&&(r.map&&(this.defines.USE_MAP=""),r.normalMap&&(this.defines.USE_NORMALMAP=""),r.envMap&&(this.defines.USE_ENVMAP=""),r.aoMap&&(this.defines.USE_AOMAP=""),r.specularMap&&(this.defines.USE_SPECULARMAP=""),r.alphaMap&&(this.defines.USE_ALPHAMAP=""),r.lightMap&&(this.defines.USE_LIGHTMAP=""),r.emissiveMap&&(this.defines.USE_EMISSIVEMAP=""),r.bumpMap&&(this.defines.USE_BUMPMAP=""),r.displacementMap&&(this.defines.USE_DISPLACEMENTMAP=""),r.roughnessMap&&(this.defines.USE_DISPLACEMENTMAP=""),r.roughnessMap&&(this.defines.USE_ROUGHNESSMAP=""),r.metalnessMap&&(this.defines.USE_METALNESSMAP=""),r.envMap)){this.defines.USE_ENVMAP="";var i="ENVMAP_TYPE_CUBE",a="ENVMAP_MODE_REFLECTION",o="ENVMAP_BLENDING_MULTIPLY";switch(r.envMap.mapping){case e.CubeReflectionMapping:case e.CubeRefractionMapping:i="ENVMAP_TYPE_CUBE";break;case e.CubeUVReflectionMapping:case e.CubeUVRefractionMapping:i="ENVMAP_TYPE_CUBE_UV";break;case e.EquirectangularReflectionMapping:case e.EquirectangularRefractionMapping:i="ENVMAP_TYPE_EQUIREC";break;case e.SphericalReflectionMapping:i="ENVMAP_TYPE_SPHERE"}switch(r.envMap.mapping){case e.CubeRefractionMapping:case e.EquirectangularRefractionMapping:a="ENVMAP_MODE_REFRACTION"}switch(r.combine){case e.MixOperation:o="ENVMAP_BLENDING_MIX";break;case e.AddOperation:o="ENVMAP_BLENDING_ADD";break;case e.MultiplyOperation:default:o="ENVMAP_BLENDING_MULTIPLY"}this.defines[i]="",this.defines[o]="",this.defines[a]=""}}function r(n){this.varyingParameters=[],this.vertexParameters=[],this.vertexFunctions=[],this.vertexInit=[],this.vertexNormal=[],this.vertexPosition=[],this.vertexColor=[],this.fragmentFunctions=[],this.fragmentParameters=[],this.fragmentInit=[],this.fragmentMap=[],this.fragmentDiffuse=[],t.call(this,n,e.ShaderLib.basic.uniforms),this.lights=!1,this.vertexShader=this.concatVertexShader(),this.fragmentShader=this.concatFragmentShader()}function i(n){this.varyingParameters=[],this.vertexFunctions=[],this.vertexParameters=[],this.vertexInit=[],this.vertexNormal=[],this.vertexPosition=[],this.vertexColor=[],this.fragmentFunctions=[],this.fragmentParameters=[],this.fragmentInit=[],this.fragmentMap=[],this.fragmentDiffuse=[],this.fragmentEmissive=[],this.fragmentSpecular=[],t.call(this,n,e.ShaderLib.phong.uniforms),this.lights=!0,this.vertexShader=this.concatVertexShader(),this.fragmentShader=this.concatFragmentShader()}function a(n){this.varyingParameters=[],this.vertexFunctions=[],this.vertexParameters=[],this.vertexInit=[],this.vertexNormal=[],this.vertexPosition=[],this.vertexColor=[],this.fragmentFunctions=[],this.fragmentParameters=[],this.fragmentInit=[],this.fragmentMap=[],this.fragmentDiffuse=[],this.fragmentRoughness=[],this.fragmentMetalness=[],this.fragmentEmissive=[],t.call(this,n,e.ShaderLib.standard.uniforms),this.lights=!0,this.vertexShader=this.concatVertexShader(),this.fragmentShader=this.concatFragmentShader()}function o(n){this.varyingParameters=[],this.vertexFunctions=[],this.vertexParameters=[],this.vertexInit=[],this.vertexPosition=[],this.vertexColor=[],this.fragmentFunctions=[],this.fragmentParameters=[],this.fragmentInit=[],this.fragmentMap=[],this.fragmentDiffuse=[],this.fragmentShape=[],t.call(this,n,e.ShaderLib.points.uniforms),this.vertexShader=this.concatVertexShader(),this.fragmentShader=this.concatFragmentShader()}function s(n){this.depthPacking=e.RGBADepthPacking,this.clipping=!0,this.vertexFunctions=[],this.vertexParameters=[],this.vertexInit=[],this.vertexPosition=[],t.call(this,n),this.uniforms=e.UniformsUtils.merge([e.ShaderLib.depth.uniforms,this.uniforms]),this.vertexShader=this.concatVertexShader(),this.fragmentShader=e.ShaderLib.depth.fragmentShader}function l(n){this.depthPacking=e.RGBADepthPacking,this.clipping=!0,this.vertexFunctions=[],this.vertexParameters=[],this.vertexInit=[],this.vertexPosition=[],t.call(this,n),this.uniforms=e.UniformsUtils.merge([e.ShaderLib.distanceRGBA.uniforms,this.uniforms]),this.vertexShader=this.concatVertexShader(),this.fragmentShader=e.ShaderLib.distanceRGBA.fragmentShader}function c(n,t){e.BufferGeometry.call(this),this.prefabGeometry=n,this.prefabCount=t,this.prefabVertexCount=n.vertices.length,this.bufferIndices(),this.bufferPositions()}function f(n,t){e.BufferGeometry.call(this),this.modelGeometry=n,this.faceCount=this.modelGeometry.faces.length,this.vertexCount=this.modelGeometry.vertices.length,(t=t||{}).computeCentroids&&this.computeCentroids(),this.bufferIndices(),this.bufferPositions(t.localizeFaces)}function u(n){e.BufferGeometry.call(this),this.pointCount=n,this.bufferPositions()}function p(n,e,t,r,i){this.key=n,this.start=e,this.duration=t,this.transition=r,this.compiler=i,this.trail=0}function d(){this.duration=0,this.timeKey="tTime",this.segments={},this.__key=0}t.prototype=Object.assign(Object.create(e.ShaderMaterial.prototype),{constructor:t,setUniformValues:function(n){var e=this;n&&Object.keys(n).forEach(function(t){t in e.uniforms&&(e.uniforms[t].value=n[t])})},stringifyChunk:function(n){return this[n]?"string"==typeof this[n]?this[n]:this[n].join("\n"):""}}),(r.prototype=Object.create(t.prototype)).constructor=r,r.prototype.concatVertexShader=function(){return"\n  #include <common>\n  #include <uv_pars_vertex>\n  #include <uv2_pars_vertex>\n  #include <envmap_pars_vertex>\n  #include <color_pars_vertex>\n  #include <fog_pars_vertex>\n  #include <morphtarget_pars_vertex>\n  #include <skinning_pars_vertex>\n  #include <logdepthbuf_pars_vertex>\n  #include <clipping_planes_pars_vertex>\n  \n  "+this.stringifyChunk("vertexParameters")+"\n  "+this.stringifyChunk("varyingParameters")+"\n  "+this.stringifyChunk("vertexFunctions")+"\n  \n  void main() {\n\n    "+this.stringifyChunk("vertexInit")+"\n  \n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n    #include <skinbase_vertex>\n  \n    #ifdef USE_ENVMAP\n  \n    #include <beginnormal_vertex>\n    \n    "+this.stringifyChunk("vertexNormal")+"\n    \n    #include <morphnormal_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n  \n    #endif\n  \n    #include <begin_vertex>\n    \n    "+this.stringifyChunk("vertexPosition")+"\n    "+this.stringifyChunk("vertexColor")+"\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n  \n    #include <worldpos_vertex>\n    #include <clipping_planes_vertex>\n    #include <envmap_vertex>\n    #include <fog_vertex>\n  }"},r.prototype.concatFragmentShader=function(){return"\n  uniform vec3 diffuse;\n  uniform float opacity;\n  \n  "+this.stringifyChunk("fragmentParameters")+"\n  "+this.stringifyChunk("varyingParameters")+"\n  "+this.stringifyChunk("fragmentFunctions")+"\n  \n  #ifndef FLAT_SHADED\n  \n    varying vec3 vNormal;\n  \n  #endif\n  \n  #include <common>\n  #include <color_pars_fragment>\n  #include <uv_pars_fragment>\n  #include <uv2_pars_fragment>\n  #include <map_pars_fragment>\n  #include <alphamap_pars_fragment>\n  #include <aomap_pars_fragment>\n  #include <lightmap_pars_fragment>\n  #include <envmap_pars_fragment>\n  #include <fog_pars_fragment>\n  #include <specularmap_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  #include <clipping_planes_pars_fragment>\n  \n  void main() {\n  \n    "+this.stringifyChunk("fragmentInit")+"\n  \n    #include <clipping_planes_fragment>\n\n    vec4 diffuseColor = vec4( diffuse, opacity );\n\n    "+this.stringifyChunk("fragmentDiffuse")+"\n  \n    #include <logdepthbuf_fragment>\n    \n    "+(this.stringifyChunk("fragmentMap")||"#include <map_fragment>")+"\n    \n    #include <color_fragment>\n    #include <alphamap_fragment>\n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n  \n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n  \n    // accumulation (baked indirect lighting only)\n    #ifdef USE_LIGHTMAP\n  \n      reflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n  \n    #else\n  \n      reflectedLight.indirectDiffuse += vec3( 1.0 );\n  \n    #endif\n  \n    // modulation\n    #include <aomap_fragment>\n  \n    reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n  \n    vec3 outgoingLight = reflectedLight.indirectDiffuse;\n  \n    #include <envmap_fragment>\n  \n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n  \n    #include <premultiplied_alpha_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n  }"},(i.prototype=Object.create(t.prototype)).constructor=i,i.prototype.concatVertexShader=function(){return"\n  #define PHONG\n\n  varying vec3 vViewPosition;\n  \n  #ifndef FLAT_SHADED\n  \n    varying vec3 vNormal;\n  \n  #endif\n  \n  #include <common>\n  #include <uv_pars_vertex>\n  #include <uv2_pars_vertex>\n  #include <displacementmap_pars_vertex>\n  #include <envmap_pars_vertex>\n  #include <color_pars_vertex>\n  #include <fog_pars_vertex>\n  #include <morphtarget_pars_vertex>\n  #include <skinning_pars_vertex>\n  #include <shadowmap_pars_vertex>\n  #include <logdepthbuf_pars_vertex>\n  #include <clipping_planes_pars_vertex>\n  \n  "+this.stringifyChunk("vertexParameters")+"\n  "+this.stringifyChunk("varyingParameters")+"\n  "+this.stringifyChunk("vertexFunctions")+"\n  \n  void main() {\n  \n    "+this.stringifyChunk("vertexInit")+"\n  \n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n  \n    #include <beginnormal_vertex>\n    \n    "+this.stringifyChunk("vertexNormal")+"\n    \n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n  \n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n  \n    vNormal = normalize( transformedNormal );\n  \n  #endif\n  \n    #include <begin_vertex>\n    \n    "+this.stringifyChunk("vertexPosition")+"\n    "+this.stringifyChunk("vertexColor")+"\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n  \n    vViewPosition = - mvPosition.xyz;\n  \n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n  }"},i.prototype.concatFragmentShader=function(){return"\n  #define PHONG\n\n  uniform vec3 diffuse;\n  uniform vec3 emissive;\n  uniform vec3 specular;\n  uniform float shininess;\n  uniform float opacity;\n  \n  #include <common>\n  #include <packing>\n  #include <dithering_pars_fragment>\n  #include <color_pars_fragment>\n  #include <uv_pars_fragment>\n  #include <uv2_pars_fragment>\n  #include <map_pars_fragment>\n  #include <alphamap_pars_fragment>\n  #include <aomap_pars_fragment>\n  #include <lightmap_pars_fragment>\n  #include <emissivemap_pars_fragment>\n  #include <envmap_pars_fragment>\n  #include <gradientmap_pars_fragment>\n  #include <fog_pars_fragment>\n  #include <bsdfs>\n  #include <lights_pars>\n  #include <lights_phong_pars_fragment>\n  #include <shadowmap_pars_fragment>\n  #include <bumpmap_pars_fragment>\n  #include <normalmap_pars_fragment>\n  #include <specularmap_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  #include <clipping_planes_pars_fragment>\n  \n  "+this.stringifyChunk("fragmentParameters")+"\n  "+this.stringifyChunk("varyingParameters")+"\n  "+this.stringifyChunk("fragmentFunctions")+"\n  \n  void main() {\n  \n    "+this.stringifyChunk("fragmentInit")+"\n  \n    #include <clipping_planes_fragment>\n  \n    vec4 diffuseColor = vec4( diffuse, opacity );\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n    vec3 totalEmissiveRadiance = emissive;\n  \n    "+this.stringifyChunk("fragmentDiffuse")+"\n  \n    #include <logdepthbuf_fragment>\n\n    "+(this.stringifyChunk("fragmentMap")||"#include <map_fragment>")+"\n\n    #include <color_fragment>\n    #include <alphamap_fragment>\n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment>\n    \n    "+this.stringifyChunk("fragmentEmissive")+"\n    \n    #include <emissivemap_fragment>\n  \n    // accumulation\n    #include <lights_phong_fragment>\n    \n    "+this.stringifyChunk("fragmentSpecular")+"\n    \n    #include <lights_template>\n  \n    // modulation\n    #include <aomap_fragment>\n  \n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n  \n    #include <envmap_fragment>\n  \n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n  \n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n  \n  }"},(a.prototype=Object.create(t.prototype)).constructor=a,a.prototype.concatVertexShader=function(){return"\n  #define PHYSICAL\n\n  varying vec3 vViewPosition;\n  \n  #ifndef FLAT_SHADED\n  \n    varying vec3 vNormal;\n  \n  #endif\n  \n  #include <common>\n  #include <uv_pars_vertex>\n  #include <uv2_pars_vertex>\n  #include <displacementmap_pars_vertex>\n  #include <color_pars_vertex>\n  #include <fog_pars_vertex>\n  #include <morphtarget_pars_vertex>\n  #include <skinning_pars_vertex>\n  #include <shadowmap_pars_vertex>\n  #include <logdepthbuf_pars_vertex>\n  #include <clipping_planes_pars_vertex>\n  \n  "+this.stringifyChunk("vertexParameters")+"\n  "+this.stringifyChunk("varyingParameters")+"\n  "+this.stringifyChunk("vertexFunctions")+"\n  \n  void main() {\n\n    "+this.stringifyChunk("vertexInit")+"\n\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n  \n    #include <beginnormal_vertex>\n    \n    "+this.stringifyChunk("vertexNormal")+"\n    \n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n  \n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n  \n    vNormal = normalize( transformedNormal );\n  \n  #endif\n  \n    #include <begin_vertex>\n    \n    "+this.stringifyChunk("vertexPosition")+"\n    "+this.stringifyChunk("vertexColor")+"\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n  \n    vViewPosition = - mvPosition.xyz;\n  \n    #include <worldpos_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n  }"},a.prototype.concatFragmentShader=function(){return"\n  #define PHYSICAL\n  \n  uniform vec3 diffuse;\n  uniform vec3 emissive;\n  uniform float roughness;\n  uniform float metalness;\n  uniform float opacity;\n  \n  #ifndef STANDARD\n    uniform float clearCoat;\n    uniform float clearCoatRoughness;\n  #endif\n  \n  varying vec3 vViewPosition;\n  \n  #ifndef FLAT_SHADED\n  \n    varying vec3 vNormal;\n  \n  #endif\n  \n  #include <common>\n  #include <packing>\n  #include <dithering_pars_fragment>\n  #include <color_pars_fragment>\n  #include <uv_pars_fragment>\n  #include <uv2_pars_fragment>\n  #include <map_pars_fragment>\n  #include <alphamap_pars_fragment>\n  #include <aomap_pars_fragment>\n  #include <lightmap_pars_fragment>\n  #include <emissivemap_pars_fragment>\n  #include <envmap_pars_fragment>\n  #include <fog_pars_fragment>\n  #include <bsdfs>\n  #include <cube_uv_reflection_fragment>\n  #include <lights_pars>\n  #include <lights_physical_pars_fragment>\n  #include <shadowmap_pars_fragment>\n  #include <bumpmap_pars_fragment>\n  #include <normalmap_pars_fragment>\n  #include <roughnessmap_pars_fragment>\n  #include <metalnessmap_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  #include <clipping_planes_pars_fragment>\n  \n  "+this.stringifyChunk("fragmentParameters")+"\n  "+this.stringifyChunk("varyingParameters")+"\n  "+this.stringifyChunk("fragmentFunctions")+"\n  \n  void main() {\n  \n    "+this.stringifyChunk("fragmentInit")+"\n  \n    #include <clipping_planes_fragment>\n  \n    vec4 diffuseColor = vec4( diffuse, opacity );\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n    vec3 totalEmissiveRadiance = emissive;\n  \n    "+this.stringifyChunk("fragmentDiffuse")+"\n  \n    #include <logdepthbuf_fragment>\n\n    "+(this.stringifyChunk("fragmentMap")||"#include <map_fragment>")+"\n\n    #include <color_fragment>\n    #include <alphamap_fragment>\n    #include <alphatest_fragment>\n    \n    float roughnessFactor = roughness;\n    "+this.stringifyChunk("fragmentRoughness")+"\n    #ifdef USE_ROUGHNESSMAP\n    \n      vec4 texelRoughness = texture2D( roughnessMap, vUv );\n    \n      // reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n      roughnessFactor *= texelRoughness.g;\n    \n    #endif\n    \n    float metalnessFactor = metalness;\n    "+this.stringifyChunk("fragmentMetalness")+"\n    #ifdef USE_METALNESSMAP\n    \n      vec4 texelMetalness = texture2D( metalnessMap, vUv );\n      metalnessFactor *= texelMetalness.b;\n    \n    #endif\n    \n    #include <normal_fragment>\n    \n    "+this.stringifyChunk("fragmentEmissive")+"\n    \n    #include <emissivemap_fragment>\n  \n    // accumulation\n    #include <lights_physical_fragment>\n    #include <lights_template>\n  \n    // modulation\n    #include <aomap_fragment>\n  \n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n  \n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n  \n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n  \n  }"},(o.prototype=Object.create(t.prototype)).constructor=o,o.prototype.concatVertexShader=function(){return"\n  uniform float size;\n  uniform float scale;\n  \n  #include <common>\n  #include <color_pars_vertex>\n  #include <fog_pars_vertex>\n  #include <shadowmap_pars_vertex>\n  #include <logdepthbuf_pars_vertex>\n  #include <clipping_planes_pars_vertex>\n  \n  "+this.stringifyChunk("vertexParameters")+"\n  "+this.stringifyChunk("varyingParameters")+"\n  "+this.stringifyChunk("vertexFunctions")+"\n  \n  void main() {\n  \n    "+this.stringifyChunk("vertexInit")+"\n  \n    #include <color_vertex>\n    #include <begin_vertex>\n    \n    "+this.stringifyChunk("vertexPosition")+"\n    "+this.stringifyChunk("vertexColor")+"\n    \n    #include <project_vertex>\n  \n    #ifdef USE_SIZEATTENUATION\n      gl_PointSize = size * ( scale / - mvPosition.z );\n    #else\n      gl_PointSize = size;\n    #endif\n  \n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n    #include <worldpos_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n  }"},o.prototype.concatFragmentShader=function(){return"\n  uniform vec3 diffuse;\n  uniform float opacity;\n  \n  #include <common>\n  #include <packing>\n  #include <color_pars_fragment>\n  #include <map_particle_pars_fragment>\n  #include <fog_pars_fragment>\n  #include <shadowmap_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  #include <clipping_planes_pars_fragment>\n  \n  "+this.stringifyChunk("fragmentParameters")+"\n  "+this.stringifyChunk("varyingParameters")+"\n  "+this.stringifyChunk("fragmentFunctions")+"\n  \n  void main() {\n  \n    "+this.stringifyChunk("fragmentInit")+"\n  \n    #include <clipping_planes_fragment>\n  \n    vec3 outgoingLight = vec3( 0.0 );\n    vec4 diffuseColor = vec4( diffuse, opacity );\n  \n    "+this.stringifyChunk("fragmentDiffuse")+"\n  \n    #include <logdepthbuf_fragment>\n\n    "+(this.stringifyChunk("fragmentMap")||"#include <map_particle_fragment>")+"\n\n    #include <color_fragment>\n    #include <alphatest_fragment>\n  \n    outgoingLight = diffuseColor.rgb;\n  \n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    \n    "+this.stringifyChunk("fragmentShape")+"\n  \n    #include <premultiplied_alpha_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n  }"},(s.prototype=Object.create(t.prototype)).constructor=s,s.prototype.concatVertexShader=function(){return"\n  #include <common>\n  #include <uv_pars_vertex>\n  #include <displacementmap_pars_vertex>\n  #include <morphtarget_pars_vertex>\n  #include <skinning_pars_vertex>\n  #include <logdepthbuf_pars_vertex>\n  #include <clipping_planes_pars_vertex>\n  \n  "+this.stringifyChunk("vertexParameters")+"\n  "+this.stringifyChunk("vertexFunctions")+"\n  \n  void main() {\n  \n    "+this.stringifyChunk("vertexInit")+"\n  \n    #include <uv_vertex>\n  \n    #include <skinbase_vertex>\n  \n    #ifdef USE_DISPLACEMENTMAP\n  \n      #include <beginnormal_vertex>\n      #include <morphnormal_vertex>\n      #include <skinnormal_vertex>\n  \n    #endif\n  \n    #include <begin_vertex>\n    \n    "+this.stringifyChunk("vertexPosition")+"\n\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n  }"},(l.prototype=Object.create(t.prototype)).constructor=l,l.prototype.concatVertexShader=function(){return"\n  #define DISTANCE\n\n  varying vec3 vWorldPosition;\n  \n  #include <common>\n  #include <uv_pars_vertex>\n  #include <displacementmap_pars_vertex>\n  #include <morphtarget_pars_vertex>\n  #include <skinning_pars_vertex>\n  #include <clipping_planes_pars_vertex>\n  \n  "+this.stringifyChunk("vertexParameters")+"\n  "+this.stringifyChunk("vertexFunctions")+"\n  \n  void main() {\n\n    "+this.stringifyChunk("vertexInit")+"\n  \n    #include <uv_vertex>\n  \n    #include <skinbase_vertex>\n  \n    #ifdef USE_DISPLACEMENTMAP\n  \n      #include <beginnormal_vertex>\n      #include <morphnormal_vertex>\n      #include <skinnormal_vertex>\n  \n    #endif\n  \n    #include <begin_vertex>\n    \n    "+this.stringifyChunk("vertexPosition")+"\n\n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <worldpos_vertex>\n    #include <clipping_planes_vertex>\n  \n    vWorldPosition = worldPosition.xyz;\n  \n  }"},(c.prototype=Object.create(e.BufferGeometry.prototype)).constructor=c,c.prototype.bufferIndices=function(){for(var n=this.prefabGeometry.faces.length,t=3*this.prefabGeometry.faces.length,r=[],i=0;i<n;i++){var a=this.prefabGeometry.faces[i];r.push(a.a,a.b,a.c)}var o=new Uint32Array(this.prefabCount*t);this.setIndex(new e.BufferAttribute(o,1));for(var s=0;s<this.prefabCount;s++)for(var l=0;l<t;l++)o[s*t+l]=r[l]+s*this.prefabVertexCount},c.prototype.bufferPositions=function(){for(var n=this.createAttribute("position",3).array,e=0,t=0;e<this.prefabCount;e++)for(var r=0;r<this.prefabVertexCount;r++,t+=3){var i=this.prefabGeometry.vertices[r];n[t]=i.x,n[t+1]=i.y,n[t+2]=i.z}},c.prototype.bufferUvs=function(){for(var n=this.prefabGeometry.faces.length,e=this.prefabVertexCount=this.prefabGeometry.vertices.length,t=[],r=0;r<n;r++){var i=this.prefabGeometry.faces[r],a=this.prefabGeometry.faceVertexUvs[0][r];t[i.a]=a[0],t[i.b]=a[1],t[i.c]=a[2]}for(var o=this.createAttribute("uv",2),s=0,l=0;s<this.prefabCount;s++)for(var c=0;c<e;c++,l+=2){var f=t[c];o.array[l]=f.x,o.array[l+1]=f.y}},c.prototype.createAttribute=function(n,t,r){var i=new Float32Array(this.prefabCount*this.prefabVertexCount*t),a=new e.BufferAttribute(i,t);if(this.addAttribute(n,a),r)for(var o=[],s=0;s<this.prefabCount;s++)r(o,s,this.prefabCount),this.setPrefabData(a,s,o);return a},c.prototype.setPrefabData=function(n,e,t){n="string"==typeof n?this.attributes[n]:n;for(var r=e*this.prefabVertexCount*n.itemSize,i=0;i<this.prefabVertexCount;i++)for(var a=0;a<n.itemSize;a++)n.array[r++]=t[a]};var m={separateFaces:function(n){for(var e=[],t=0,r=n.faces.length;t<r;t++){var i=e.length,a=n.faces[t],o=a.a,s=a.b,l=a.c,c=n.vertices[o],f=n.vertices[s],u=n.vertices[l];e.push(c.clone()),e.push(f.clone()),e.push(u.clone()),a.a=i,a.b=i+1,a.c=i+2}n.vertices=e},computeCentroid:function(n,e,t){var r=n.vertices[e.a],i=n.vertices[e.b],a=n.vertices[e.c];return t=t||new THREE.Vector3,t.x=(r.x+i.x+a.x)/3,t.y=(r.y+i.y+a.y)/3,t.z=(r.z+i.z+a.z)/3,t},randomInBox:function(n,t){return t=t||new e.Vector3,t.x=e.Math.randFloat(n.min.x,n.max.x),t.y=e.Math.randFloat(n.min.y,n.max.y),t.z=e.Math.randFloat(n.min.z,n.max.z),t},randomAxis:function(n){return n=n||new e.Vector3,n.x=e.Math.randFloatSpread(2),n.y=e.Math.randFloatSpread(2),n.z=e.Math.randFloatSpread(2),n.normalize(),n},createDepthAnimationMaterial:function(n){return new s({uniforms:n.uniforms,defines:n.defines,vertexFunctions:n.vertexFunctions,vertexParameters:n.vertexParameters,vertexInit:n.vertexInit,vertexPosition:n.vertexPosition})},createDistanceAnimationMaterial:function(n){return new l({uniforms:n.uniforms,defines:n.defines,vertexFunctions:n.vertexFunctions,vertexParameters:n.vertexParameters,vertexInit:n.vertexInit,vertexPosition:n.vertexPosition})}};(f.prototype=Object.create(e.BufferGeometry.prototype)).constructor=f,f.prototype.computeCentroids=function(){this.centroids=[];for(var n=0;n<this.faceCount;n++)this.centroids[n]=m.computeCentroid(this.modelGeometry,this.modelGeometry.faces[n])},f.prototype.bufferIndices=function(){var n=new Uint32Array(3*this.faceCount);this.setIndex(new e.BufferAttribute(n,1));for(var t=0,r=0;t<this.faceCount;t++,r+=3){var i=this.modelGeometry.faces[t];n[r]=i.a,n[r+1]=i.b,n[r+2]=i.c}},f.prototype.bufferPositions=function(n){var e=this.createAttribute("position",3).array,t=void 0,r=void 0;if(!0===n)for(t=0;t<this.faceCount;t++){var i=this.modelGeometry.faces[t],a=this.centroids?this.centroids[t]:THREE.BAS.Utils.computeCentroid(this.modelGeometry,i),o=this.modelGeometry.vertices[i.a],s=this.modelGeometry.vertices[i.b],l=this.modelGeometry.vertices[i.c];e[3*i.a]=o.x-a.x,e[3*i.a+1]=o.y-a.y,e[3*i.a+2]=o.z-a.z,e[3*i.b]=s.x-a.x,e[3*i.b+1]=s.y-a.y,e[3*i.b+2]=s.z-a.z,e[3*i.c]=l.x-a.x,e[3*i.c+1]=l.y-a.y,e[3*i.c+2]=l.z-a.z}else for(t=0,r=0;t<this.vertexCount;t++,r+=3){var c=this.modelGeometry.vertices[t];e[r]=c.x,e[r+1]=c.y,e[r+2]=c.z}},f.prototype.bufferUVs=function(){for(var n=this.createAttribute("uv",2).array,e=0;e<this.faceCount;e++){var t=this.modelGeometry.faces[e],r=void 0;r=this.modelGeometry.faceVertexUvs[0][e][0],n[2*t.a]=r.x,n[2*t.a+1]=r.y,r=this.modelGeometry.faceVertexUvs[0][e][1],n[2*t.b]=r.x,n[2*t.b+1]=r.y,r=this.modelGeometry.faceVertexUvs[0][e][2],n[2*t.c]=r.x,n[2*t.c+1]=r.y}},f.prototype.createAttribute=function(n,e,t){var r=new Float32Array(this.vertexCount*e),i=new THREE.BufferAttribute(r,e);if(this.addAttribute(n,i),t)for(var a=[],o=0;o<this.faceCount;o++)t(a,o,this.faceCount),this.setFaceData(i,o,a);return i},f.prototype.setFaceData=function(n,e,t){for(var r=3*e*(n="string"==typeof n?this.attributes[n]:n).itemSize,i=0;i<3;i++)for(var a=0;a<n.itemSize;a++)n.array[r++]=t[a]},(u.prototype=Object.create(e.BufferGeometry.prototype)).constructor=u,u.prototype.bufferPositions=function(){this.createAttribute("position",3)},u.prototype.createAttribute=function(n,t,r){var i=new Float32Array(this.pointCount*t),a=new e.BufferAttribute(i,t);if(this.addAttribute(n,a),r)for(var o=[],s=0;s<this.pointCount;s++)r(o,s,this.pointCount),this.setPointData(a,s,o);return a},u.prototype.setPointData=function(n,e,t){for(var r=e*(n="string"==typeof n?this.attributes[n]:n).itemSize,i=0;i<n.itemSize;i++)n.array[r++]=t[i]};var h={catmull_rom_spline:"vec4 catmullRomSpline(vec4 p0, vec4 p1, vec4 p2, vec4 p3, float t, vec2 c) {\r\n    vec4 v0 = (p2 - p0) * c.x;\r\n    vec4 v1 = (p3 - p1) * c.y;\r\n    float t2 = t * t;\r\n    float t3 = t * t * t;\r\n\r\n    return vec4((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\r\n}\r\nvec4 catmullRomSpline(vec4 p0, vec4 p1, vec4 p2, vec4 p3, float t) {\r\n    return catmullRomSpline(p0, p1, p2, p3, t, vec2(0.5, 0.5));\r\n}\r\n\r\nvec3 catmullRomSpline(vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t, vec2 c) {\r\n    vec3 v0 = (p2 - p0) * c.x;\r\n    vec3 v1 = (p3 - p1) * c.y;\r\n    float t2 = t * t;\r\n    float t3 = t * t * t;\r\n\r\n    return vec3((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\r\n}\r\nvec3 catmullRomSpline(vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t) {\r\n    return catmullRomSpline(p0, p1, p2, p3, t, vec2(0.5, 0.5));\r\n}\r\n\r\nvec2 catmullRomSpline(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float t, vec2 c) {\r\n    vec2 v0 = (p2 - p0) * c.x;\r\n    vec2 v1 = (p3 - p1) * c.y;\r\n    float t2 = t * t;\r\n    float t3 = t * t * t;\r\n\r\n    return vec2((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\r\n}\r\nvec2 catmullRomSpline(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float t) {\r\n    return catmullRomSpline(p0, p1, p2, p3, t, vec2(0.5, 0.5));\r\n}\r\n\r\nfloat catmullRomSpline(float p0, float p1, float p2, float p3, float t, vec2 c) {\r\n    float v0 = (p2 - p0) * c.x;\r\n    float v1 = (p3 - p1) * c.y;\r\n    float t2 = t * t;\r\n    float t3 = t * t * t;\r\n\r\n    return float((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\r\n}\r\nfloat catmullRomSpline(float p0, float p1, float p2, float p3, float t) {\r\n    return catmullRomSpline(p0, p1, p2, p3, t, vec2(0.5, 0.5));\r\n}\r\n\r\nivec4 getCatmullRomSplineIndices(float l, float p) {\r\n    float index = floor(p);\r\n    int i0 = int(max(0.0, index - 1.0));\r\n    int i1 = int(index);\r\n    int i2 = int(min(index + 1.0, l));\r\n    int i3 = int(min(index + 2.0, l));\r\n\r\n    return ivec4(i0, i1, i2, i3);\r\n}\r\n\r\nivec4 getCatmullRomSplineIndicesClosed(float l, float p) {\r\n    float index = floor(p);\r\n    int i0 = int(index == 0.0 ? l : index - 1.0);\r\n    int i1 = int(index);\r\n    int i2 = int(mod(index + 1.0, l));\r\n    int i3 = int(mod(index + 2.0, l));\r\n\r\n    return ivec4(i0, i1, i2, i3);\r\n}\r\n",cubic_bezier:"vec3 cubicBezier(vec3 p0, vec3 c0, vec3 c1, vec3 p1, float t) {\r\n    float tn = 1.0 - t;\r\n\r\n    return tn * tn * tn * p0 + 3.0 * tn * tn * t * c0 + 3.0 * tn * t * t * c1 + t * t * t * p1;\r\n}\r\n\r\nvec2 cubicBezier(vec2 p0, vec2 c0, vec2 c1, vec2 p1, float t) {\r\n    float tn = 1.0 - t;\r\n\r\n    return tn * tn * tn * p0 + 3.0 * tn * tn * t * c0 + 3.0 * tn * t * t * c1 + t * t * t * p1;\r\n}\r\n",ease_back_in:"float easeBackIn(float p, float amplitude) {\r\n    return p * p * ((amplitude + 1.0) * p - amplitude);\r\n}\r\n\r\nfloat easeBackIn(float p) {\r\n    return easeBackIn(p, 1.70158);\r\n}\r\n\r\nfloat easeBackIn(float t, float b, float c, float d, float amplitude) {\r\n    return b + easeBackIn(t / d, amplitude) * c;\r\n}\r\n\r\nfloat easeBackIn(float t, float b, float c, float d) {\r\n    return b + easeBackIn(t / d) * c;\r\n}\r\n",ease_back_in_out:"float easeBackInOut(float p, float amplitude) {\r\n    amplitude *= 1.525;\r\n\r\n    return ((p *= 2.0) < 1.0) ? 0.5 * p * p * ((amplitude + 1.0) * p - amplitude) : 0.5 * ((p -= 2.0) * p * ((amplitude + 1.0) * p + amplitude) + 2.0);\r\n}\r\n\r\nfloat easeBackInOut(float p) {\r\n    return easeBackInOut(p, 1.70158);\r\n}\r\n\r\nfloat easeBackInOut(float t, float b, float c, float d, float amplitude) {\r\n    return b + easeBackInOut(t / d, amplitude) * c;\r\n}\r\n\r\nfloat easeBackInOut(float t, float b, float c, float d) {\r\n    return b + easeBackInOut(t / d) * c;\r\n}\r\n",ease_back_out:"float easeBackOut(float p, float amplitude) {\r\n    return ((p = p - 1.0) * p * ((amplitude + 1.0) * p + amplitude) + 1.0);\r\n}\r\n\r\nfloat easeBackOut(float p) {\r\n    return easeBackOut(p, 1.70158);\r\n}\r\n\r\nfloat easeBackOut(float t, float b, float c, float d, float amplitude) {\r\n    return b + easeBackOut(t / d, amplitude) * c;\r\n}\r\n\r\nfloat easeBackOut(float t, float b, float c, float d) {\r\n    return b + easeBackOut(t / d) * c;\r\n}\r\n",ease_bezier:"float easeBezier(float p, vec4 curve) {\r\n    float ip = 1.0 - p;\r\n    return (3.0 * ip * ip * p * curve.xy + 3.0 * ip * p * p * curve.zw + p * p * p).y;\r\n}\r\n\r\nfloat easeBezier(float t, float b, float c, float d, vec4 curve) {\r\n    return b + easeBezier(t / d, curve) * c;\r\n}\r\n",ease_bounce_in:"float easeBounceIn(float p) {\r\n    if ((p = 1.0 - p) < 1.0 / 2.75) {\r\n        return 1.0 - (7.5625 * p * p);\r\n    } else if (p < 2.0 / 2.75) {\r\n        return 1.0 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);\r\n    } else if (p < 2.5 / 2.75) {\r\n        return 1.0 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);\r\n    }\r\n    return 1.0 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);\r\n}\r\n\r\nfloat easeBounceIn(float t, float b, float c, float d) {\r\n    return b + easeBounceIn(t / d) * c;\r\n}\r\n",ease_bounce_in_out:"float easeBounceInOut(float p) {\r\n    bool invert = (p < 0.5);\r\n\r\n    p = invert ? (1.0 - (p * 2.0)) : ((p * 2.0) - 1.0);\r\n\r\n    if (p < 1.0 / 2.75) {\r\n        p = 7.5625 * p * p;\r\n    } else if (p < 2.0 / 2.75) {\r\n        p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\r\n    } else if (p < 2.5 / 2.75) {\r\n        p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\r\n    } else {\r\n        p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\r\n    }\r\n\r\n    return invert ? (1.0 - p) * 0.5 : p * 0.5 + 0.5;\r\n}\r\n\r\nfloat easeBounceInOut(float t, float b, float c, float d) {\r\n    return b + easeBounceInOut(t / d) * c;\r\n}\r\n",ease_bounce_out:"float easeBounceOut(float p) {\r\n    if (p < 1.0 / 2.75) {\r\n        return 7.5625 * p * p;\r\n    } else if (p < 2.0 / 2.75) {\r\n        return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\r\n    } else if (p < 2.5 / 2.75) {\r\n        return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\r\n    }\r\n    return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\r\n}\r\n\r\nfloat easeBounceOut(float t, float b, float c, float d) {\r\n    return b + easeBounceOut(t / d) * c;\r\n}\r\n",ease_circ_in:"float easeCircIn(float p) {\r\n    return -(sqrt(1.0 - p * p) - 1.0);\r\n}\r\n\r\nfloat easeCircIn(float t, float b, float c, float d) {\r\n    return b + easeCircIn(t / d) * c;\r\n}\r\n",ease_circ_in_out:"float easeCircInOut(float p) {\r\n    return ((p *= 2.0) < 1.0) ? -0.5 * (sqrt(1.0 - p * p) - 1.0) : 0.5 * (sqrt(1.0 - (p -= 2.0) * p) + 1.0);\r\n}\r\n\r\nfloat easeCircInOut(float t, float b, float c, float d) {\r\n    return b + easeCircInOut(t / d) * c;\r\n}\r\n",ease_circ_out:"float easeCircOut(float p) {\r\n  return sqrt(1.0 - (p = p - 1.0) * p);\r\n}\r\n\r\nfloat easeCircOut(float t, float b, float c, float d) {\r\n  return b + easeCircOut(t / d) * c;\r\n}\r\n",ease_cubic_in:"float easeCubicIn(float t) {\r\n  return t * t * t;\r\n}\r\n\r\nfloat easeCubicIn(float t, float b, float c, float d) {\r\n  return b + easeCubicIn(t / d) * c;\r\n}\r\n",ease_cubic_in_out:"float easeCubicInOut(float t) {\r\n  return (t /= 0.5) < 1.0 ? 0.5 * t * t * t : 0.5 * ((t-=2.0) * t * t + 2.0);\r\n}\r\n\r\nfloat easeCubicInOut(float t, float b, float c, float d) {\r\n  return b + easeCubicInOut(t / d) * c;\r\n}\r\n",ease_cubic_out:"float easeCubicOut(float t) {\r\n  float f = t - 1.0;\r\n  return f * f * f + 1.0;\r\n}\r\n\r\nfloat easeCubicOut(float t, float b, float c, float d) {\r\n  return b + easeCubicOut(t / d) * c;\r\n}\r\n",ease_elastic_in:"float easeElasticIn(float p, float amplitude, float period) {\r\n    float p1 = max(amplitude, 1.0);\r\n    float p2 = period / min(amplitude, 1.0);\r\n    float p3 = p2 / PI2 * (asin(1.0 / p1));\r\n\r\n    return -(p1 * pow(2.0, 10.0 * (p -= 1.0)) * sin((p - p3) * PI2 / p2));\r\n}\r\n\r\nfloat easeElasticIn(float p) {\r\n    return easeElasticIn(p, 1.0, 0.3);\r\n}\r\n\r\nfloat easeElasticIn(float t, float b, float c, float d, float amplitude, float period) {\r\n    return b + easeElasticIn(t / d, amplitude, period) * c;\r\n}\r\n\r\nfloat easeElasticIn(float t, float b, float c, float d) {\r\n    return b + easeElasticIn(t / d) * c;\r\n}\r\n",ease_elastic_in_out:"float easeElasticInOut(float p, float amplitude, float period) {\r\n    float p1 = max(amplitude, 1.0);\r\n    float p2 = period / min(amplitude, 1.0);\r\n    float p3 = p2 / PI2 * (asin(1.0 / p1));\r\n\r\n    return ((p *= 2.0) < 1.0) ? -0.5 * (p1 * pow(2.0, 10.0 * (p -= 1.0)) * sin((p - p3) * PI2 / p2)) : p1 * pow(2.0, -10.0 * (p -= 1.0)) * sin((p - p3) * PI2 / p2) * 0.5 + 1.0;\r\n}\r\n\r\nfloat easeElasticInOut(float p) {\r\n    return easeElasticInOut(p, 1.0, 0.3);\r\n}\r\n\r\nfloat easeElasticInOut(float t, float b, float c, float d, float amplitude, float period) {\r\n    return b + easeElasticInOut(t / d, amplitude, period) * c;\r\n}\r\n\r\nfloat easeElasticInOut(float t, float b, float c, float d) {\r\n    return b + easeElasticInOut(t / d) * c;\r\n}\r\n",ease_elastic_out:"float easeElasticOut(float p, float amplitude, float period) {\r\n    float p1 = max(amplitude, 1.0);\r\n    float p2 = period / min(amplitude, 1.0);\r\n    float p3 = p2 / PI2 * (asin(1.0 / p1));\r\n\r\n    return p1 * pow(2.0, -10.0 * p) * sin((p - p3) * PI2 / p2) + 1.0;\r\n}\r\n\r\nfloat easeElasticOut(float p) {\r\n    return easeElasticOut(p, 1.0, 0.3);\r\n}\r\n\r\nfloat easeElasticOut(float t, float b, float c, float d, float amplitude, float period) {\r\n    return b + easeElasticOut(t / d, amplitude, period) * c;\r\n}\r\n\r\nfloat easeElasticOut(float t, float b, float c, float d) {\r\n    return b + easeElasticOut(t / d) * c;\r\n}\r\n",ease_expo_in:"float easeExpoIn(float p) {\r\n    return pow(2.0, 10.0 * (p - 1.0));\r\n}\r\n\r\nfloat easeExpoIn(float t, float b, float c, float d) {\r\n    return b + easeExpoIn(t / d) * c;\r\n}\r\n",ease_expo_in_out:"float easeExpoInOut(float p) {\r\n    return ((p *= 2.0) < 1.0) ? 0.5 * pow(2.0, 10.0 * (p - 1.0)) : 0.5 * (2.0 - pow(2.0, -10.0 * (p - 1.0)));\r\n}\r\n\r\nfloat easeExpoInOut(float t, float b, float c, float d) {\r\n    return b + easeExpoInOut(t / d) * c;\r\n}\r\n",ease_expo_out:"float easeExpoOut(float p) {\r\n  return 1.0 - pow(2.0, -10.0 * p);\r\n}\r\n\r\nfloat easeExpoOut(float t, float b, float c, float d) {\r\n  return b + easeExpoOut(t / d) * c;\r\n}\r\n",ease_quad_in:"float easeQuadIn(float t) {\r\n    return t * t;\r\n}\r\n\r\nfloat easeQuadIn(float t, float b, float c, float d) {\r\n  return b + easeQuadIn(t / d) * c;\r\n}\r\n",ease_quad_in_out:"float easeQuadInOut(float t) {\r\n    float p = 2.0 * t * t;\r\n    return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\r\n}\r\n\r\nfloat easeQuadInOut(float t, float b, float c, float d) {\r\n    return b + easeQuadInOut(t / d) * c;\r\n}\r\n",ease_quad_out:"float easeQuadOut(float t) {\r\n  return -t * (t - 2.0);\r\n}\r\n\r\nfloat easeQuadOut(float t, float b, float c, float d) {\r\n  return b + easeQuadOut(t / d) * c;\r\n}\r\n",ease_quart_in:"float easeQuartIn(float t) {\r\n  return t * t * t * t;\r\n}\r\n\r\nfloat easeQuartIn(float t, float b, float c, float d) {\r\n  return b + easeQuartIn(t / d) * c;\r\n}\r\n",ease_quart_in_out:"float easeQuartInOut(float t) {\r\n    return t < 0.5 ? 8.0 * pow(t, 4.0) : -8.0 * pow(t - 1.0, 4.0) + 1.0;\r\n}\r\n\r\nfloat easeQuartInOut(float t, float b, float c, float d) {\r\n    return b + easeQuartInOut(t / d) * c;\r\n}\r\n",ease_quart_out:"float easeQuartOut(float t) {\r\n  return 1.0 - pow(1.0 - t, 4.0);\r\n}\r\n\r\nfloat easeQuartOut(float t, float b, float c, float d) {\r\n  return b + easeQuartOut(t / d) * c;\r\n}\r\n",ease_quint_in:"float easeQuintIn(float t) {\r\n    return pow(t, 5.0);\r\n}\r\n\r\nfloat easeQuintIn(float t, float b, float c, float d) {\r\n    return b + easeQuintIn(t / d) * c;\r\n}\r\n",ease_quint_in_out:"float easeQuintInOut(float t) {\r\n    return (t /= 0.5) < 1.0 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2.0) * t * t * t * t + 2.0);\r\n}\r\n\r\nfloat easeQuintInOut(float t, float b, float c, float d) {\r\n    return b + easeQuintInOut(t / d) * c;\r\n}\r\n",ease_quint_out:"float easeQuintOut(float t) {\r\n    return (t -= 1.0) * t * t * t * t + 1.0;\r\n}\r\n\r\nfloat easeQuintOut(float t, float b, float c, float d) {\r\n    return b + easeQuintOut(t / d) * c;\r\n}\r\n",ease_sine_in:"float easeSineIn(float p) {\r\n  return -cos(p * 1.57079632679) + 1.0;\r\n}\r\n\r\nfloat easeSineIn(float t, float b, float c, float d) {\r\n  return b + easeSineIn(t / d) * c;\r\n}\r\n",ease_sine_in_out:"float easeSineInOut(float p) {\r\n  return -0.5 * (cos(PI * p) - 1.0);\r\n}\r\n\r\nfloat easeSineInOut(float t, float b, float c, float d) {\r\n  return b + easeSineInOut(t / d) * c;\r\n}\r\n",ease_sine_out:"float easeSineOut(float p) {\r\n  return sin(p * 1.57079632679);\r\n}\r\n\r\nfloat easeSineOut(float t, float b, float c, float d) {\r\n  return b + easeSineOut(t / d) * c;\r\n}\r\n",quaternion_rotation:"vec3 rotateVector(vec4 q, vec3 v) {\r\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n}\r\n\r\nvec4 quatFromAxisAngle(vec3 axis, float angle) {\r\n    float halfAngle = angle * 0.5;\r\n    return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\r\n}\r\n",quaternion_slerp:"vec4 quatSlerp(vec4 q0, vec4 q1, float t) {\r\n    float s = 1.0 - t;\r\n    float c = dot(q0, q1);\r\n    float dir = -1.0; //c >= 0.0 ? 1.0 : -1.0;\r\n    float sqrSn = 1.0 - c * c;\r\n\r\n    if (sqrSn > 2.220446049250313e-16) {\r\n        float sn = sqrt(sqrSn);\r\n        float len = atan(sn, c * dir);\r\n\r\n        s = sin(s * len) / sn;\r\n        t = sin(t * len) / sn;\r\n    }\r\n\r\n    float tDir = t * dir;\r\n\r\n    return normalize(q0 * s + q1 * tDir);\r\n}\r\n"};p.prototype.compile=function(){return this.compiler(this)},Object.defineProperty(p.prototype,"end",{get:function(){return this.start+this.duration}}),d.segmentDefinitions={},d.register=function(n,e){return d.segmentDefinitions[n]=e,e},d.prototype.add=function(n,e,t){var r=eval,i=this.duration;void 0!==t?("number"==typeof t?i=t:"string"==typeof t&&r("start"+t),this.duration=Math.max(this.duration,i+n)):this.duration+=n;for(var a=Object.keys(e),o=void 0,s=0;s<a.length;s++)o=a[s],this.processTransition(o,e[o],i,n)},d.prototype.processTransition=function(n,e,t,r){var i=d.segmentDefinitions[n],a=this.segments[n];a||(a=this.segments[n]=[]),void 0===e.from&&(0===a.length?e.from=i.defaultFrom:e.from=a[a.length-1].transition.to),a.push(new p((this.__key++).toString(),t,r,e,i.compiler))},d.prototype.compile=function(){for(var n=[],e=Object.keys(this.segments),t=void 0,r=0;r<e.length;r++)t=this.segments[e[r]],this.fillGaps(t),t.forEach(function(e){n.push(e.compile())});return n},d.prototype.fillGaps=function(n){if(0!==n.length){for(var e=void 0,t=void 0,r=0;r<n.length-1;r++)e=n[r],t=n[r+1],e.trail=t.start-e.end;(e=n[n.length-1]).trail=this.duration-e.end}},d.prototype.getTransformCalls=function(n){var e=this.timeKey;return this.segments[n]?this.segments[n].map(function(n){return"applyTransform"+n.key+"("+e+", transformed);"}).join("\n"):""};var v={vec3:function(n,e,t){return"vec3 "+n+" = vec3("+(e.x||0).toPrecision(t)+", "+(e.y||0).toPrecision(t)+", "+(e.z||0).toPrecision(t)+");"},vec4:function(n,e,t){return"vec4 "+n+" = vec4("+(e.x||0).toPrecision(t)+", "+(e.y||0).toPrecision(t)+", "+(e.z||0).toPrecision(t)+", "+(e.w||0).toPrecision(t)+");"},delayDuration:function(n){return"\n    float cDelay"+n.key+" = "+n.start.toPrecision(4)+";\n    float cDuration"+n.key+" = "+n.duration.toPrecision(4)+";\n    "},progress:function(n){return 0===n.duration?"float progress = 1.0;":"\n      float progress = clamp(time - cDelay"+n.key+", 0.0, cDuration"+n.key+") / cDuration"+n.key+";\n      "+(n.transition.ease?"progress = "+n.transition.ease+"(progress"+(n.transition.easeParams?", "+n.transition.easeParams.map(function(n){return n.toPrecision(4)}).join(", "):"")+");":"")+"\n      "},renderCheck:function(n){return"if (time < "+n.start.toPrecision(4)+" || time > "+(n.end+n.trail).toPrecision(4)+") return;"}},g={compiler:function(n){return"\n    "+v.delayDuration(n)+"\n    "+v.vec3("cTranslateFrom"+n.key,n.transition.from,2)+"\n    "+v.vec3("cTranslateTo"+n.key,n.transition.to,2)+"\n    \n    void applyTransform"+n.key+"(float time, inout vec3 v) {\n    \n      "+v.renderCheck(n)+"\n      "+v.progress(n)+"\n    \n      v += mix(cTranslateFrom"+n.key+", cTranslateTo"+n.key+", progress);\n    }\n    "},defaultFrom:new e.Vector3(0,0,0)};d.register("translate",g);var _={compiler:function(n){var e=n.transition.origin;return"\n    "+v.delayDuration(n)+"\n    "+v.vec3("cScaleFrom"+n.key,n.transition.from,2)+"\n    "+v.vec3("cScaleTo"+n.key,n.transition.to,2)+"\n    "+(e?v.vec3("cOrigin"+n.key,e,2):"")+"\n    \n    void applyTransform"+n.key+"(float time, inout vec3 v) {\n    \n      "+v.renderCheck(n)+"\n      "+v.progress(n)+"\n    \n      "+(e?"v -= cOrigin"+n.key+";":"")+"\n      v *= mix(cScaleFrom"+n.key+", cScaleTo"+n.key+", progress);\n      "+(e?"v += cOrigin"+n.key+";":"")+"\n    }\n    "},defaultFrom:new e.Vector3(1,1,1)};d.register("scale",_);var x={compiler:function(n){var t=new e.Vector4(n.transition.from.axis.x,n.transition.from.axis.y,n.transition.from.axis.z,n.transition.from.angle),r=n.transition.to.axis||n.transition.from.axis,i=new e.Vector4(r.x,r.y,r.z,n.transition.to.angle),a=n.transition.origin;return"\n    "+v.delayDuration(n)+"\n    "+v.vec4("cRotationFrom"+n.key,t,8)+"\n    "+v.vec4("cRotationTo"+n.key,i,8)+"\n    "+(a?v.vec3("cOrigin"+n.key,a,2):"")+"\n    \n    void applyTransform"+n.key+"(float time, inout vec3 v) {\n      "+v.renderCheck(n)+"\n      "+v.progress(n)+"\n\n      "+(a?"v -= cOrigin"+n.key+";":"")+"\n      vec3 axis = normalize(mix(cRotationFrom"+n.key+".xyz, cRotationTo"+n.key+".xyz, progress));\n      float angle = mix(cRotationFrom"+n.key+".w, cRotationTo"+n.key+".w, progress);\n      vec4 q = quatFromAxisAngle(axis, angle);\n      v = rotateVector(q, v);\n      "+(a?"v += cOrigin"+n.key+";":"")+"\n    }\n    "},defaultFrom:{axis:new e.Vector3,angle:0}};d.register("rotate",x),n.BasicAnimationMaterial=r,n.PhongAnimationMaterial=i,n.StandardAnimationMaterial=a,n.PointsAnimationMaterial=o,n.DepthAnimationMaterial=s,n.DistanceAnimationMaterial=l,n.PrefabBufferGeometry=c,n.ModelBufferGeometry=f,n.PointBufferGeometry=u,n.ShaderChunk=h,n.Timeline=d,n.TimelineSegment=p,n.TimelineChunks=v,n.TranslationSegment=g,n.ScaleSegment=_,n.RotationSegment=x,n.Utils=m,Object.defineProperty(n,"__esModule",{value:!0})});
